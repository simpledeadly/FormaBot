const { bot } = require('../')
const { Context } = require('../data')
const { formatToMinutes, updateObjectInContext, curry, getValueFromContext } = require('../utils')
const {
	parseMarkdown,
	optionsWithCreateAndStop,
} = require('../parseModeVariables')

const curriedGetValueFromContext = curry(getValueFromContext)
const selections = curriedGetValueFromContext('selections')
const currencyPair = selections('currencyPair')
const screenshots = Context[2].screenshots

const handleStep4 = callbackQuery => {
	const chatId = callbackQuery.message.chat.id
	let end = ''

	const endingsArray = [
		'–ü–†–û–ü–£–©–ï–ù–û üö´',
		'–û–¢–ú–ï–ù–ï–ù–û üõ†',
		'–ü–õ–Æ–° ‚ö°Ô∏è',
		'–ú–ò–ù–£–° üí¢',
		'–ú–ò–ù–£–° ‚ùå',
		'–ü–õ–Æ–° üí•',
		'–í–û–ó–í–†–ê–¢ ‚ôªÔ∏è',
		'–ü–õ–Æ–° ‚úÖ',
		'–ü–õ–Æ–° üöÄ',
	]

	const check = endingsArray.includes(callbackQuery.data)

	if (check === true) {
		end = callbackQuery.data
		updateObjectInContext('selections', 'end', end)

		endFulfilling = new Date()
		const formattedDifferenceFulfilling = endFulfilling - endFindingTime
		let formattedFulfillingTime = formatToMinutes(formattedDifferenceFulfilling)
		let asdf = formattedFulfillingTime.replace(
			/[ –º–∏–Ω—É—Ç[\] –º–∏–Ω—É—Ç—ã[\] –º–∏–Ω—É—Ç–∞]/gm,
			null
		)
		let formattedFulfillingTimeForAverage = parseInt(asdf)

		Context[7].allFulfillingTimes.push(formattedFulfillingTimeForAverage)

		fulfillingTimeIncrement++
		let key = '–û—Ç—Ä–∞–±–æ—Ç–∫–∞' + fulfillingTimeIncrement

		const fulfillingTimeElement = {
			[key]: formattedFulfillingTime,
		}

		Context[6].fulfillingTimeElements.push(fulfillingTimeElement)

		Context[8].endings.push(end)
		selections('end') = end
		console.log('–ò—Ç–æ–≥ —Å–¥–µ–ª–∫–∏:', end)

		const attempt = selections('attempt')

		const message = `–í–∞–ª—é—Ç–Ω–∞—è –ø–∞—Ä–∞: *${currencyPair}*\n–ü–æ–ø—ã—Ç–∫–∞: *${
			attempt
		}*\n–ò—Ç–æ–≥ —Å–¥–µ–ª–∫–∏: *${selections('end')}* ${
			description !== ''
				? `\n\n*${'–û–ø–∏—Å–∞–Ω–∏–µ:'}*\n${description}`
				: ''
		} ${
			extraInfo('comment') !== ''
				? `\n\n*${'–ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π:'}*\n_${extraInfo('comment')}_`
				: ''
		}`

		// bot.sendDice(chatId, parseMarkdown)
		bot
			.sendMessage(chatId, `_${'–û—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –≤ –∫–∞–Ω–∞–ª:'}_`, parseMarkdown)
			.then(() => {
				if (screenshots.length > 0) {
					const media = screenshots.map((fileId, index) => {
						const mediaOptions = {
							type: 'photo',
							media: fileId,
							parse_mode: 'Markdown',
						}

						if (index === 0) {
							mediaOptions.caption = message
						}
						return mediaOptions
					})

					if (
						end === '–ü–õ–Æ–° üöÄ' ||
						end === '–ü–õ–Æ–° ‚úÖ' ||
						end === '–ü–õ–Æ–° üí•' ||
						end === '–ü–õ–Æ–° ‚ö°Ô∏è' ||
						end === '–ü–õ–Æ–° ‚ù§Ô∏è‚Äçüî•'
					) {
						Context[9].plusesGlobal + 1
						Context[9].pluses + 1
					}

					if (end === '–û–¢–ú–ï–ù–ï–ù–û üõ†') {
						messageWithTimeout(
							chatId,
							`–¢–µ–±–µ –æ—Ç–º–µ–Ω–∏–ª–∏ —Å–¥–µ–ª–∫—É. –£—Å–ø–æ–∫–æ–π—Å—è –∏ –ø—Ä–æ–¥–æ–ª–∂–∞–π! :)`,
							optionsWithCreateAndStop,
							500
						)
						Context[9].cancelles + 1
					} else if (
						end === '–ú–ò–ù–£–° üí¢' &&
						attempt === '2 –ü–ï–†–ï–ö–†–´–¢–ò–ï'
					) {
						messageWithTimeout(
							chatId,
							`–¢—ã –ø–æ–ª—É—á–∏–ª –º–∏–Ω—É—Å –∏–∑-–∑–∞ –æ—à–∏–±–∫–∏. –ü–æ–¥—É–º–∞–π –ø–∞—Ä—É –º–∏–Ω—É—Ç, –≤—Å–ø–æ–º–Ω–∏ 3-–µ –ø—Ä–∞–≤–∏–ª–æ, –ø–æ–¥—É–º–∞–π –Ω–∞–¥ –ø—Ä–∏—á–∏–Ω–æ–π —Ç–∞–∫–æ–≥–æ –∏—Å—Ö–æ–¥–∞ –∏ –∑–∞–∫–æ–Ω—á–∏ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ:\n_${'¬´–Ø –ø–æ–ª—É—á–∏–ª –º–∏–Ω—É—Å –∏–∑-–∑–∞ ...¬ª (–ù–∞–ø—Ä.: —Å–ø–µ—à–∫–∏, –Ω–µ–≤–Ω–∏–º–∞—Ç–µ–ª—å–Ω–æ—Å—Ç–∏)'}_`,
							optionsWithStop,
							1000
						)
						hasMinus = true
						setTimeout(() => (hasMinus = false), 21600000)
					} else if (
						end === '–ú–ò–ù–£–° ‚ùå' &&
						attempt === '2 –ü–ï–†–ï–ö–†–´–¢–ò–ï'
					) {
						messageWithTimeout(
							chatId,
							`–¢—ã –ø–æ–ª—É—á–∏–ª –º–∏–Ω—É—Å –∏–∑-–∑–∞ —Ä—ã–Ω–∫–∞. –ï—Å–ª–∏ —Ç—ã –¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª—å–Ω–æ —É–≤–µ—Ä–µ–Ω, —á—Ç–æ —Ç—ã –Ω–µ –Ω–∞–¥–µ–ª–∞–ª –æ—à–∏–±–æ–∫, —Ç–æ –∑–∞–∫–æ–Ω—á–∏ —ç—Ç–æ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ:\n_${'¬´–Ø –ø–æ–ª—É—á–∏–ª –º–∏–Ω—É—Å –∏–∑-–∑–∞ ...¬ª (–ù–∞–ø—Ä.: —Å–ø–µ—à–∫–∏, –Ω–µ–≤–Ω–∏–º–∞—Ç–µ–ª—å–Ω–æ—Å—Ç–∏, —Ä—ã–Ω–∫–∞)'}_`,
							optionsWithStop,
							1000
						)
						hasMinus = true
						setTimeout(() => (hasMinus = false), 21600000)
					} else {
						messageWithTimeout(
							chatId,
							`*${`–£—à–ª–æ –≤—Ä–µ–º–µ–Ω–∏ –Ω–∞ –æ—Ç—Ä–∞–±–æ—Ç–∫—É: ${formattedFulfillingTime}`}*`,
							optionsWithCreateAndStop,
							500
						)
					}

					const channelId = '-1001875103729' // ID of my BO trades channel
					// bot
					// 	.sendMediaGroup(channelId, media, parseMarkdown)
					// 	.then(() => console.log('–ò—Ç–æ–≥ –æ–ø—É–±–ª–∏–∫–æ–≤–∞–Ω.')) // Send created post to channel
					bot.sendMediaGroup(chatId, media, parseMarkdown).then(() => {
						Context[9].findingTimeIncrement + 1
						Context[9].createCounterGlobal + 1
						Context[9].createCounter + 1
						console.log('–ò—Ç–æ–≥ —Å–æ–∑–¥–∞–Ω.')
					})
				} else {
					bot.sendMessage(chatId, `*${'–ò—Ç–æ–≥ –Ω–µ —Å–æ–∑–¥–∞–Ω.'}*`, parseMarkdown)
					console.log('–°–∫—Ä–∏–Ω—à–æ—Ç—ã –Ω–µ –ø—Ä–∏–∫—Ä–µ–ø–ª–µ–Ω—ã.')
				}
			})
	} else {
		bot.answerCallbackQuery(callbackQuery.id, {
			text: '–ö–æ—Ä—Ä–µ–∫—Ç–Ω–æ –≤—ã–±–µ—Ä–∏—Ç–µ –∏—Ç–æ–≥',
			show_alert: false,
		})
	}
}

module.exports = {
	handleStep4,
}
