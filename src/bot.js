const { handleStep1 } = require('./steps/step1.js');
const { handleStep2 } = require('./steps/step2.js');
const { handleStep3 } = require('./steps/step3.js');
const { handleStep4 } = require('./steps/step4.js');

const { formatMilliseconds } = require('./helpers/helpers.js');
let { bot, selections, sele, screenshots, allFindingTimes, allFulfillingTimes } = require('./lib/variables.js');
console.log('–ó–∞–ø—É—â–µ–Ω–æ!');

bot.on('message', (callbackQuery) => {
  if (callbackQuery.photo) {
    const fileId = callbackQuery.photo[callbackQuery.photo.length - 1].file_id;
    const chatId = callbackQuery.chat.id;
    const descriptionOfEntry = callbackQuery.caption;

    if (sele.description === '' && descriptionOfEntry !== undefined) {
      sele.description = descriptionOfEntry;

      setTimeout(() => console.log(`–û–ø–∏—Å–∞–Ω–∏–µ –≤—Ö–æ–¥–∞: ${ descriptionOfEntry }`), 500);
    } else if (sele.description === '' && descriptionOfEntry === '') {
      sele.description = '';
    };
    
    screenshots.push(fileId);
    console.log(`–°–∫—Ä–∏–Ω—à–æ—Ç —Å–æ—Ö—Ä–∞–Ω–µ–Ω: ${ fileId }`);

    if (screenshots.length > 1 && screenshots.length < 3 && selections.currencyPair) {
      const options = {
        reply_markup: {
          inline_keyboard: [
            [
              { text: '0Ô∏è‚É£ –û—Å–Ω–æ–≤–∞', callback_data: '–û–°–ù–û–í–ê' },
              { text: '1Ô∏è‚É£ –ü–µ—Ä–µ–∫—Ä—ã—Ç–∏–µ', callback_data: '–ü–ï–†–ï–ö–†–´–¢–ò–ï' },
              { text: '2Ô∏è‚É£ 2 –ø–µ—Ä–µ–∫—Ä—ã—Ç–∏–µ', callback_data: '2 –ü–ï–†–ï–ö–†–´–¢–ò–ï' }
            ]
          ]
        },
        parse_mode: 'Markdown'
      };
  
      bot.sendMessage(
        chatId,
        `*${'–®–∞–≥ 3: –í—ã–±–µ—Ä–∏—Ç–µ —Å –∫–∞–∫–æ–π –ø–æ–ø—ã—Ç–∫–∏ —Å–¥–µ–ª–∫–∞ –±—ã–ª–∞ –∑–∞–∫–æ–Ω—á–µ–Ω–∞'}*\n${'(–ú–æ–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π)'}`,
        options,
        selections.messageId
      );
    } else {
      console.log('not working because:', selections.currencyPair, 'NOTHING HERE!');
    }
  } else {}
});

bot.on('message', (callbackQuery) => {
  const chatId = callbackQuery.chat.id;

  if (
    callbackQuery.text
    && selections.currencyPair !== ''
    && callbackQuery.text !== '/start'
    && callbackQuery.text !== '/stop'
    && callbackQuery.text !== '/create'
    && callbackQuery.text !== '/help'
    && callbackQuery.text !== '/test'
    && callbackQuery.text !== '/statistic'
    ) {
    const comment = callbackQuery.text;
    
    sele.comment = comment;
    console.log('–ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π:', comment);

    bot.sendMessage(chatId, `*${'–ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π –æ–±–Ω–æ–≤–ª—ë–Ω'}*`, options = { parse_mode: 'Markdown' });
  }

  const mistake1 = '–Ø –ø–æ–ª—É—á–∏–ª –º–∏–Ω—É—Å –∏–∑-–∑–∞ —Å–ø–µ—à–∫–∏.'
  const mistake2 = '–Ø –ø–æ–ª—É—á–∏–ª –º–∏–Ω—É—Å –∏–∑-–∑–∞ –Ω–µ–≤–Ω–∏–º–∞—Ç–µ–ª—å–Ω–æ—Å—Ç–∏.'
  const immistake1 = '–Ø –ø–æ–ª—É—á–∏–ª –º–∏–Ω—É—Å –∏–∑-–∑–∞ —Ä—ã–Ω–∫–∞.'

  if (callbackQuery.text === mistake1) {
    const chatId = callbackQuery.chat.id;
    setTimeout(() =>
      bot.sendMessage(
        chatId,
        `–ï—Å–ª–∏ —Ç—ã –ø–æ–ª—É—á–∏–ª –º–∏–Ω—É—Å –∏–∑-–∑–∞ —Å–ø–µ—à–∫–∏, —Ç–æ —É—Å–ø–æ–∫–æ–π—Å—è. –ò –∑–∞–∫–æ–Ω—á–∏ —Å–µ—Å—Å–∏—é.`,
        options = { parse_mode: 'Markdown' }
      ), 2000
    );
    
    setTimeout(() =>
      bot.sendMessage(
        chatId,
        `_${'–ó–∞–∫–æ–Ω—á–∏—à—å? ü§®'}_`,
        options = { parse_mode: 'Markdown' }
      ), 5000
    );
  } else if (callbackQuery.text === mistake2) {
    const chatId = callbackQuery.chat.id;

    setTimeout(() =>
      bot.sendMessage(
        chatId,
        `–ï—Å–ª–∏ —Ç—ã –ø–æ–ª—É—á–∏–ª –º–∏–Ω—É—Å –∏–∑-–∑–∞ –Ω–µ–≤–Ω–∏–º–∞—Ç–µ–ª—å–Ω–æ—Å—Ç–∏, —Ç–æ —Ç–µ–±–µ –Ω—É–∂–Ω–æ *${'–∑–∞–∫–æ–Ω—á–∏—Ç—å —Å–µ—Å—Å–∏—é –ü–†–Ø–ú–û –°–ï–ô–ß–ê–°.'}*\n\n–ù–µ –ø–µ—Ä–µ–∂–∏–≤–∞–π, –∑–∞–≤—Ç—Ä–∞ –ø–æ–≤—ã—Å–∏—à—å —Å—É–º–º—É! üòâ`,
        options = { parse_mode: 'Markdown' }
      ), 4000
    );

    setTimeout(() =>
      bot.sendMessage(
        chatId,
        `_${'–ó–∞–∫–æ–Ω—á–∏—à—å? üôÇ'}_`,
        options = { parse_mode: 'Markdown' }
      ), 7000
    );
  } else if (callbackQuery.text === immistake1) {
    const chatId = callbackQuery.chat.id;

    setTimeout(() =>
      bot.sendMessage(
        chatId,
        `–ß—Ç–æ –∂–µ, —Å–µ–≥–æ–¥–Ω—è —Ä—ã–Ω–æ–∫ —Ä–µ—à–∏–ª –ø–æ–π—Ç–∏ –ø—Ä–æ—Ç–∏–≤ —Ç–µ–±—è, —Ç–∞–∫–æ–µ –±—ã–≤–∞–µ—Ç –∏ —ç—Ç–æ –Ω–æ—Ä–º–∞–ª—å–Ω–æ! –õ—É—á—à–µ —Ç–µ–±–µ –≤—Å—ë-—Ç–∞–∫–∏ –ø–æ–π—Ç–∏ –æ—Ç–¥–æ—Ö–Ω—É—Ç—å, –∞ –∑–∞–≤—Ç—Ä–∞ –ø–æ–¥–Ω–∏–º–µ—à—å —Å—É–º–º—É!`,
        options = { parse_mode: 'Markdown' }
      ), 4000
    );
  } else if (callbackQuery.text === 'yes' || callbackQuery.text === '–¥–∞') {
    setTimeout(() =>
      bot.sendMessage(
        chatId,
        `–¢—ã —Å–¥–µ–ª–∞–ª –ü–†–ê–í–ò–õ–¨–ù–û–ï —Ä–µ—à–µ–Ω–∏–µ, –º–æ–ª–æ–¥–µ—Ü! –°–ª–µ–¥–æ–≤–∞–Ω–∏–µ –≥—Ä–∞–º–æ—Ç–Ω–æ–π —Å–∏—Å—Ç–µ–º–µ —Å–∏–ª—å–Ω–æ –ø–æ–º–æ–∂–µ—Ç —Ç–µ–±–µ.\n\n–°–µ—Å—Å–∏—è –∑–∞–∫–æ–Ω—á–µ–Ω–∞, –æ—Ç–¥–æ—Ö–Ω–∏!`,
        options = { parse_mode: 'Markdown' }
      ), 1000
    );
  } else if (callbackQuery.text === 'no' || callbackQuery.text === '–Ω–µ—Ç') {
    setTimeout(() =>
      bot.sendMessage(
        chatId,
        `–¢—ã —Ç–æ—á–Ω–æ –Ω–∞–¥–µ–ª–∞–µ—à—å –æ—à–∏–±–æ–∫, –ø–æ—ç—Ç–æ–º—É –ø—Ä–æ—à—É —Ç–µ–±—è, –û–°–¢–ê–ù–û–í–ò–°–¨. –°–æ—Ö—Ä–∞–Ω–∏ —Å–≤–æ–π –±–∞–ª–∞–Ω—Å, –Ω–µ—Ä–≤—ã –∏ –í–†–ï–ú–Ø.\n\n–ù–µ –∑–∞–±—ã–≤–∞–≤–∞–π, —Ç—ã –º–æ–∂–µ—à—å –ø–æ—Ç–æ—Ä–≥–æ–≤–∞—Ç—å –∑–∞–≤—Ç—Ä–∞ —Å –ø–æ–≤—ã—à–µ–Ω–Ω—ã–º –æ–±—ä—ë–º–æ–º!`,
        options = { parse_mode: 'Markdown' }
      ), 1000
    );

    setTimeout(() =>
      bot.sendMessage(
        chatId,
        `_${'–ó–∞–∫–æ–Ω—á–∏—à—å? üòï'}_`,
        options = { parse_mode: 'Markdown' }
      ), 5000
    );
  };
});

let startCounter = 0;

// –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /start
bot.onText(/\/start/, (msg) => {
  const chatId = msg.chat.id;
  startTime = new Date();
  
  const rules = `*${'–ü–†–ê–í–ò–õ–ê:'}*\n1. –ù–∏–∫–∞–∫–æ–π –∂–∞–¥–Ω–æ—Å—Ç–∏, –Ω–∏–∫–∞–∫–∏—Ö –Ω–∞–¥–µ–∂–¥.\n2. –°—Ç—Ä–æ–≥–æ–µ –æ—Ç–Ω–æ—à–µ–Ω–∏–µ –∫ —Ä—ã–Ω–∫—É.\n    _${'–ö–∞–∫ –±—É–¥—Ç–æ —Å –ø–æ–ª–∏—Ü–µ–π—Å–∫–∏–º —Ä–∞–∑–≥–æ–≤–∞—Ä–∏–≤–∞—é.'}_\n3. –ù–µ–ª—å–∑—è –±–µ—Å–∏—Ç—å—Å—è. _${'–¶–∏—Ç–∞—Ç–∞ –Ω–∏–∂–µ.'}_\n4. –ó–∞–ø–æ–ª–Ω–∏—Ç—å –±–æ—Ç–∞ –ø—Ä–µ–∂–¥–µ, —á–µ–º –≤—ã—Ä–∞–∂–∞—Ç—å —ç–º–æ—Ü–∏–∏.\n5. *${'–¶–µ–ª—å:'}* –≤—Å–µ–º–∏ —Å–∏–ª–∞–º–∏ —Å–æ—Ö—Ä–∞–Ω–∏—Ç—å –∫–∞–∫ –º–æ–∂–Ω–æ –±–æ–ª—å—à–∏–π –±–∞–ª–∞–Ω—Å. _${'–ù—É–∂–Ω–æ —Å—Ç–∞—Ä–∞—Ç—å—Å—è "–∏–∑–±–µ–∂–∞—Ç—å –î–¢–ü".'}_\n\n*${'¬´–ù–µ–≥–∞—Ç–∏–≤–Ω—ã–µ —ç–º–æ—Ü–∏–∏ —Ç–æ—Ä–º–æ–∑—è—Ç –ø—Ä–æ—Ü–µ—Å—Å —Ä–∞–∑–º—ã—à–ª–µ–Ω–∏–π¬ª'}*`

  options = { parse_mode: 'Markdown' }
  startCounter++
  console.log('–°–µ—Å—Å–∏—è –Ω–∞—á–∞—Ç–∞!', startTime)
  
  bot.sendMessage(chatId, `*${'–í—ã –Ω–∞—á–∞–ª–∏ —Å–µ—Å—Å–∏—é.'}*`, options = { parse_mode: 'Markdown' });
  setTimeout(() => {
    bot.sendMessage(chatId, rules, options)
  }, 250);

  // createCounter = 0;
  // pluses = 0;
});

let createCounter = 0;

let hasMinus = false;
let pluses = 0;

// –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /create
bot.onText(/\/create/, (msg) => {
  const chatId = msg.chat.id;
  startFindingTime = new Date();
  // findingTimeIncrement++; // for dev branch

  if (startCounter !== 0 && hasMinus === false) {
    handleStep1(msg)

    selections = {
      currencyPair: '',
      outcome: '',
      attempt: '',
      end: '',
      messageId: null
    };
    sele = {
      comment: '',
      description: ''
    };
    screenshots = [];

    console.log(`–°–æ–∑–¥–∞–Ω–∏–µ –Ω–æ–≤–æ–≥–æ –∏—Ç–æ–≥–∞...`);
  } else if (hasMinus === true) {
    bot.sendMessage(chatId, `*${'–¢—ã –ø–æ–ª—É—á–∏–ª –º–∏–Ω—É—Å. –ü–æ–¥—É–º–∞–π –æ –±—É–¥—É—â–µ–º, –∑–∞–∫–æ–Ω—á–∏ —Å–µ—Å—Å–∏—é –∫–æ–º–∞–Ω–¥–æ–π /stop.\n\n–ò –æ—Ç–≤–µ—Ç—å –Ω–∞ –≤–æ–ø—Ä–æ—Å –≤—ã—à–µ, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞.'}*`, options = { parse_mode: 'Markdown' });
  } else {
    bot.sendMessage(chatId, `*${'–ß—Ç–æ–±—ã —Å–æ–∑–¥–∞—Ç—å –∏—Ç–æ–≥, –Ω–∞—á–Ω–∏—Ç–µ —Å–µ—Å—Å–∏—é –∫–æ–º–∞–Ω–¥–æ–π /start.'}*`, options = { parse_mode: 'Markdown' });
  }
});

// –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /stop
bot.onText(/\/stop/, (msg) => {
  const chatId = msg.chat.id;

  // for (let g = 0; g < allFindingTimes.length; g++) {
  //   console.log(g, 'situation:', allFindingTimes[g]);
  // };
  
  if (startCounter !== 0) {
    const endTime = new Date();
    const timeDifference = endTime - startTime;
    const formattedDifference = formatMilliseconds(timeDifference);

    options = { parse_mode: 'Markdown' };
    console.log('–°–µ—Å—Å–∏—è –∑–∞–∫–æ–Ω—á–µ–Ω–∞!', new Date());

    // let neww = allFindingTimes.concat(allFulfillingTimes);
    // console.log(neww)

    // –° –ø–æ–º–æ—â—å—é —ç—Ç–æ–π —Ñ—É–Ω–∫—Ü–∏–∏ –º–æ–∂–Ω–æ –¥–æ–ø–æ–ª–Ω—è—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –ø–æ –∏—Ç–æ–≥—É —Å–¥–µ–ª–∫–∏ –≤ –∏—Ç–æ–≥–æ–≤–æ–π —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–µ (—Å—Ç–∞—Ç–∞ –ø–æ—Å–ª–µ "/stop").
    const extraInfoAboutFinishedTrade = () => {
      // if () {};

      return `\n`;
    };

    if (createCounter === pluses && pluses >= 5) {
      setTimeout(() => {
        bot.sendMessage(chatId, `*${'–ò–¢–û–ì–ò –°–ï–°–°–ò–ò:'}*\n–ü—Ä–æ–¥–æ–ª–∂–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å: *${ formattedDifference }*\n–û–ø—É–±–ª–∏–∫–æ–≤–∞–Ω–æ: *${ createCounter }*,\n–û—Ç—Ä–∞–±–æ—Ç–∞–Ω–æ: *${ pluses }*\n\n–í—Ä–µ–º—è –ø–æ–∏—Å–∫–∞ –≤—Ö–æ–¥–∞:\n*${ allFindingTimes.join(extraInfoAboutFinishedTrade()) }*\n\n–í—Ä–µ–º—è –æ—Ç—Ä–∞–±–æ—Ç–∫–∏ –≤—Ö–æ–¥–∞:\n*${ allFulfillingTimes.join(extraInfoAboutFinishedTrade()) }*\n\n–•–æ—Ä–æ—à–∞—è –ø–æ–ª—É—á–∏–ª–∞—Å—å —Å–µ—Å—Å–∏—è!`, options);
      }, 250);
    } else {
      setTimeout(() => {
        // bot.sendMessage(chatId, `*${'–ò–¢–û–ì–ò –°–ï–°–°–ò–ò:'}*\n–ü—Ä–æ–¥–æ–ª–∂–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å: *${ formattedDifference }*\n–û–ø—É–±–ª–∏–∫–æ–≤–∞–Ω–æ: *${ createCounter }*,\n–û—Ç—Ä–∞–±–æ—Ç–∞–Ω–æ: *${ pluses }*\n\n–í—Ä–µ–º—è –ø–æ–∏—Å–∫–∞ –≤—Ö–æ–¥–∞:\n*${ fulfillingTimeElements }*`, options);
        bot.sendMessage(chatId, `*${'–ò–¢–û–ì–ò –°–ï–°–°–ò–ò:'}*\n–ü—Ä–æ–¥–æ–ª–∂–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å: *${ formattedDifference }*\n–û–ø—É–±–ª–∏–∫–æ–≤–∞–Ω–æ: *${ createCounter }*,\n–û—Ç—Ä–∞–±–æ—Ç–∞–Ω–æ: *${ pluses }*\n\n–í—Ä–µ–º—è –ø–æ–∏—Å–∫–∞ –≤—Ö–æ–¥–∞:\n*${ allFindingTimes.join(extraInfoAboutFinishedTrade()) }*\n\n–í—Ä–µ–º—è –æ—Ç—Ä–∞–±–æ—Ç–∫–∏ –≤—Ö–æ–¥–∞:\n*${ allFulfillingTimes.join(extraInfoAboutFinishedTrade()) }*`, options);
      }, 250);
    };

    bot.sendMessage(chatId, `*${'–í—ã –∑–∞–∫–æ–Ω—á–∏–ª–∏ —Å–µ—Å—Å–∏—é.'}*`, options);

    pluses = 0;
    startTime = null;
    startCounter = 0;
    createCounter = 0;
    findingTimeIncrement = 0;
    fulfillingTimeIncrement = 0;
    setTimeout(() => {
      allFulfillingTimes = [];
      allFindingTimes = [];
    }, 300)
  } else {
    bot.sendMessage(chatId, `*${'–ß—Ç–æ–±—ã –∑–∞–∫–æ–Ω—á–∏—Ç—å —Å–µ—Å—Å–∏—é, –Ω–∞—á–Ω–∏—Ç–µ –µ—ë –∫–æ–º–∞–Ω–¥–æ–π /start.'}*`, options = { parse_mode: 'Markdown' });
  };
});

// –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /help
bot.onText(/\/help/, (msg) => {
  const chatId = msg.chat.id;
  const options = { parse_mode: 'Markdown' };
  const commands = `*${'–ö–û–ú–ê–ù–î–´:'}*\n/start *${'‚Äî –ù–∞—á–∞—Ç—å —Å–µ—Å—Å–∏—é'}*\n/create *${'‚Äî –°–æ–∑–¥–∞—Ç—å –ø–æ—Å—Ç'}*\n/stop *${'‚Äî –û—Å—Ç–∞–Ω–æ–≤–∏—Ç—å —Å–µ—Å—Å–∏—é'}*\n/help *${'‚Äî –°–ø–∏—Å–æ–∫ –∫–æ–º–∞–Ω–¥'}*\n/test *${'‚Äî –î–ª—è —Ç–µ—Å—Ç–æ–≤'}*\n/statistic *${'‚Äî –í—Å—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞'}*`;
  
  bot.sendMessage(chatId, commands, options);
});

let createCounterGlobal = 0;
let plusesGlobal = 0;
let cancelles = 0;

// –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /statistic
bot.onText(/\/statistic/, (msg) => {
  const chatId = msg.chat.id;
  const options = { parse_mode: 'Markdown' };
  const statistic = `*${'–°–¢–ê–¢–ò–°–¢–ò–ö–ê:'}*\n–û–ø—É–±–ª–∏–∫–æ–≤–∞–Ω–æ: *${ createCounterGlobal }*\n–û—Ç—Ä–∞–±–æ—Ç–∞–Ω–æ: *${ plusesGlobal }*\n–û—Ç–º–µ–Ω–µ–Ω–æ: *${ cancelles }*`;

  bot.sendMessage(chatId, statistic, options);
});

bot.on('callback_query', (callbackQuery) => {
  const step = Object.keys(selections).filter((key) => selections[key] === '').length;

  if (step === 4) {
    handleStep2(callbackQuery);
  } else if (step === 3) {
    handleStep3(callbackQuery);
  } else if (step === 2) {
    handleStep4(callbackQuery);
  }
});

// –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /test
bot.onText(/\/test/, (msg) => {
  const chatId = msg.chat.id

  const options = {
    reply_markup: {
      keyboard: [
        ['/start']
      ],
      one_time_keyboard: true
    },
    parse_mode: 'Markdown'
  };

  bot.on('message', (msg) => {
    const chatId = msg.chat.id;
    const text = msg.text;
  
    switch (text) {
      case '/start':
        // bot.sendMessage(chatId, '–°–æ–∑–¥–∞–Ω–∏–µ –ø–æ—Å—Ç–∞');
        break;
      // case '/test':
        // bot.sendMessage(chatId, '–ü–µ—Ä–µ—Ö–æ–¥ –≤ —Ä–µ–∂–∏–º —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–∏...');
        // break;
      // default:
      //   bot.sendMessage(chatId, '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –∫–æ–º–∞–Ω–¥–∞');
      //   break;
    }
  });

  bot.sendMessage(
    chatId,
    `*${'–ó–¥–µ–Ω—å –ø–æ–∫–∞ –Ω–∏—á–µ–≥–æ –Ω–µ—Ç! üöß'}*`,
    options
  );

  console.log(`–ö–æ–º–∞–Ω–¥–∞ –Ω–∞—Ö–æ–¥–∏—Ç—Å—è –≤ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–µ...`);
});


bot.on('polling_error', (error) => {
  console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–π:', error);
});